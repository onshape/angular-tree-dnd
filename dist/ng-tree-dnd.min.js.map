{"version":3,"sources":["ng-tree-dnd.js"],"names":["fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","fnController","$scope","$element","$attrs","timeLoadData","treeData","tmpTreeData","reload_data","timeReloadData","check_exist_attr","attrs","existAttr","isAnd","angular","isUndefinedOrNull","isUndefined","isArray","for_each_attrs","exist","i","len","length","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","isFunction","$watch","val","indexOf","$safeApply","fn","phase","this","$root","$$phase","$apply","getExpandOn","_len","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","push","field","colDefinitions","do_f","root","node","parent","parent_real","level","visible","index","_i","_icon","_index_real","_dept","_hashKey","__children__","__parent_real__","__parent__","__expanded__","expandLevel","__index__","__index_real__","__level__","__icon__","__icon_class__","$class","icon","__visible__","__uid__","Math","random","getHash","__hashKey__","primary_key","__dept__","init_data","data","isDefined","tree_nodes","oData","_data","_tree_nodes","expandOn","columnDefs","orderBy","_fnInitOrderBy","filter","_fnInitFilter","filterOptions","_deptTotal","indent","indent_plus","indent_unit","$tree_class","$type","$globals","copy","extend","1","iconExpand","0","iconCollapse","-1","iconLeaf","for_all_descendants","checkSibling","_nodes","getLastDescendant","last_child","n","tree","anchor_node","getElementChilds","element","querySelector","onClick","event","metaKey","shiftKey","select_anchor_node","on_click","setTimeout","onSelect","add_select_node","range_select_node","__selected__","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","_fnGetHash","_fnSetHash","setHash","accept","dragInfo","moveTo","isChanged","dropEnabled","calsIndent","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","changeKey","_key","replace","clone","_this","remove","delayReload","temp","splice","clearInfo","__inited__","add","pos","deleteScope","scope","_hash","setScope","getScope","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","info","changed","drag","target","dropped","pass","isMove","_node","nodes","_tree","_nodeAdd","_move","move","_parent","remove_nodes","startPos","forEach","hasSameParent","get_parent","hasLowerIndex","add_nodes","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","getNode","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","hiddenChild","nodeScope","_fnGetControl","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","trim","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","value","key","lenW","equals","updateLimit","$TreeLimit","fnCompile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","success","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","then","templateUrl","getPath","restrict","controller","compile","fnInitTreeDnDViewport","$q","update","viewportRect","width","eWindow","prop","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","isUpdating","isRender","updateAgain","recursivePromise","item","number","items","renderTime","cancel","setViewport","viewport","getViewport","updateDelayed","updateTimeout","nodeTemplate","getItems","$initViewport","on","module","constant","handle","directive","link","new_val","compileReplace","replaceWith","fnLink","fnWatchNode","newVal","oldVal","nodeOf","keyNode","first","parentReal","_childs","hashKey","childsElem","$node_class","enabledDnD","treeDndNode","getData","getScopeNode","objexpr","objprops","keyO","lenO","skipAttr","keepAttr","lenKeep","join","$on","$nodes_class","$inject","factory","_$initConvert","line2tree","parentKey","callback","parentId","rootIds","_primary","treeObjs","tree2tree","access_child","containKey","_copy","_child","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","get_selected_nodes","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","$injector","_fnget","name","has","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","options","fieldChild","parentPassed","_nodePassed","_childPassed","_filter_index","filter_index","_fnCheck","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","__filtered_index__","_fnBefore","_fnBeforeClear","_fnConvert","_filter","_state","isObject","fnInitFilter","keyChild","_fnOrderBy","fnOrderBy","_fnOrder","list","_fnMain","isString","_fnPlaceHolder","$params","_offset","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","toLowerCase","_$scope","preventDefault","tagName","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","hien","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","document_width","scrollWidth","offsetWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetInside","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","_height","groupId","_prev","dragBorder","prepend","lastParent","shouldShowPlace","_fnDragEnd","_isTable","_status","$$apply","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","_fnKeydownHandler","keyCode","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","fnSetCollapse","fnSetExpand","fnSetDeselect","selected_nodes","deselect_all","select_node","expand_all_parents","is_selected","deselect_node","deselect_descendants","process_selection","get_next_node","get_prev_node","preserve_anchor","selected","selectedIndex","_children","get_children","child","cleanSelected","selected_child_ct","selected_descendant_ct","sort","a","b","for_all_ancestors","ungroup_node","remove_node","group_selected_nodes","new_parent","nodeId","add_node","new_node","add_to_selection","start_index","add_node_root","expand_all","collapse_all","slice","expand_node","collapse_node","get_anchor_node","get_first_node","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.6\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n */\n(function () {\n    'use strict';\n    angular.isUndefinedOrNull = isUndefinedOrNull;\n\n    angular.isDefined = isDefined;\n\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\n        .constant(\n        '$TreeDnDClass', {\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n              '1':  'fa fa-fw fa-chevron-down',\n              '0':  'fa fa-fw fa-chevron-right',\n              '-1': 'fa fa-fw'\n            }\n        }\n    );angular.module('ntt.TreeDnD')\n    .directive(\n    'compile', [\n        '$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile, function (new_val) {\n                            if (new_val) {\n                                if (angular.isFunction(element.empty)) {\n                                    element.empty();\n                                } else {\n                                    element.html('');\n                                }\n\n                                element.append($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n)\n    .directive(\n    'compileReplace', [\n        '$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace, function (new_val) {\n                            if (new_val) {\n                                element.replaceWith($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n);\n\nangular.module('ntt.TreeDnD')\r    .directive(\r    'treeDndNodeHandle', function () {\r        return {\r            restrict: 'A',\r            scope:    true,\r            link:     function (scope, element, attrs) {\r                scope.$type = 'TreeDnDNodeHandle';\r                if (scope.$class.handle) {\r                    element.addClass(scope.$class.handle);\r                }\r            }\r        };\r    }\r);\n\nangular.module('ntt.TreeDnD')\n    .directive(\n    'treeDndNode', ['$TreeDnDViewport', '$timeout', function ($TreeDnDViewport, $timeout) {\n        return {\n            restrict: 'A',\n            replace:  true,\n            link:     fnLink\n        };\n        function fnLink(scope, element, attrs) {\n\n            scope.$node_class = '';\n\n            if (scope.$class.node) {\n                element.addClass(scope.$class.node);\n                scope.$node_class = scope.$class.node;\n            }\n            var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\n                keyNode    = attrs.treeDndNode,\n                first      = true,\n                childsElem;\n\t\t\t$TreeDnDViewport.add(scope, element);\n\n            if (enabledDnD) {\n                scope.$type = 'TreeDnDNode';\n\n                scope.getData = function () {\n                    return scope[keyNode];\n                };\n            }\n\n            scope.$element            = element;\n            scope[keyNode].__inited__ = true;\n\n            scope.getElementChilds = function () {\n                return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\n            };\n\n            scope.setScope(scope, scope[keyNode]);\n\n            scope.getScopeNode = function () {\n                return scope;\n            };\n\n            var objprops = [],\n                objexpr,\n                i, keyO  = Object.keys(scope[keyNode]),\n                lenO     = keyO.length,\n                hashKey  = scope[keyNode].__hashKey__,\n                skipAttr = [\n                    '__visible__',\n                    '__level__',\n                    '__index__',\n                    '__index_real__',\n\n                    '__parent__',\n                    '__parent_real__',\n                    '__dept__',\n                    '__icon__',\n                    '__icon_class__'\n                ],\n                keepAttr = [\n                    '__expanded__'\n                ],\n                lenKeep  = keepAttr.length;\n\n            // skip __visible__\n            for (i = 0; i < lenO + lenKeep; i++) {\n                if (i < lenO) {\n                    if (skipAttr.indexOf(keyO[i]) === -1) {\n                        objprops.push(keyNode + '.' + keyO[i]);\n                    }\n                } else {\n                    if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\n                        objprops.push(keyNode + '.' + keepAttr[i - lenO]);\n                    }\n                }\n            }\n\n            objexpr = '[' + objprops.join(',') + ']';\n\n            scope.$watch(objexpr, fnWatchNode, true);\n\n            scope.$on('$destroy', function () {\n                scope.deleteScope(scope, scope[keyNode]);\n            });\n\n            function fnWatchNode(newVal, oldVal, scope) {\n\n\t\t\t\tvar nodeOf = scope[keyNode],\n                    _icon;\n\n                if (first) {\n                    _icon                 = nodeOf.__icon__;\n                    nodeOf.__icon_class__ = scope.$class.icon[_icon];\n                } else {\n\n                    var parentReal = nodeOf.__parent_real__,\n                        parentNode = scope.tree_nodes[parentReal] || null,\n                        _childs    = nodeOf.__children__,\n                        _len       = _childs.length,\n                        _i;\n\n                    if (!nodeOf.__inited__) {\n                        nodeOf.__inited__ = true;\n                    }\n\n                    if (nodeOf.__hashKey__ !== hashKey) {\n                        // clear scope in $globals\n                        scope.deleteScope(scope, nodeOf);\n\n                        // add new scope into $globals\n                        scope.setScope(scope, nodeOf);\n                        hashKey = nodeOf.__hashKey__;\n                    }\n\n                    if (parentNode && (!parentNode.__expanded__ || !parentNode.__visible__)) {\n                        element.addClass(scope.$class.hidden);\n                        nodeOf.__visible__ = false;\n                    } else {\n                        element.removeClass(scope.$class.hidden);\n                        nodeOf.__visible__ = true;\n                    }\n\n                    if (_len === 0) {\n                        _icon = -1;\n                        nodeOf.__expanded__ = false;\n                    } else {\n                        if (nodeOf.__expanded__) {\n                            _icon = 1;\n                        } else {\n                            _icon = 0;\n                        }\n                    }\n\n                    nodeOf.__icon__       = _icon;\n                    nodeOf.__icon_class__ = scope.$class.icon[_icon];\n\n                    if (!scope.isTable) {\n                        for (_i = 0; _i < _len; _i++) {\n                            scope.for_all_descendants(_childs[_i], scope.hiddenChild, nodeOf, true);\n                        }\n                    } else {\n                        if (!childsElem) {\n                            childsElem = scope.getElementChilds();\n                        }\n\n                        if (nodeOf.__expanded__) {\n                            childsElem.removeClass(scope.$class.hidden);\n                        } else {\n                            childsElem.addClass(scope.$class.hidden);\n                        }\n                    }\n\n                }\n\n\t\t\t\tfirst      = false;\n\n            }\n        }\n    }]\n);\n\nangular.module('ntt.TreeDnD')\n    .directive(\n    'treeDndNodes', function () {\n        return {\n            restrict: 'A',\n            replace:  true,\n            link:     function (scope, element/*, attrs*/) {\n                scope.$type = 'TreeDnDNodes';\n\n                if (scope.$class.nodes) {\n                    element.addClass(scope.$class.nodes);\n                    scope.$nodes_class = scope.$class.nodes;\n                } else {\n                    scope.$nodes_class = '';\n                }\n            }\n        };\n    }\n);\n\nangular.module('ntt.TreeDnD')\n       .directive(\n           'treeDnd', fnInitTreeDnD);\n\nfnInitTreeDnD.$inject = [\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\n];\n\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport\n) {\n    return {\n        restrict:   'E',\n        scope:      true,\n        replace:    true,\n        controller: ['$scope', '$element', '$attrs', fnController],\n        compile:    fnCompile\n    };\n\n    function fnController($scope, $element, $attrs) {\n        $scope.indent      = 20;\n        $scope.indent_plus = 15;\n        $scope.indent_unit = 'px';\n        $scope.$tree_class = 'table';\n        $scope.primary_key = '__uid__';\n\n        $scope.$type          = 'TreeDnD';\n        // $scope.enabledFilter = null;\n        $scope.colDefinitions = [];\n        $scope.$globals       = {};\n        $scope.$class         = {};\n\n        $scope.treeData   = [];\n        $scope.tree_nodes = [];\n\n        $scope.$class = angular.copy($TreeDnDClass);\n        angular.extend(\n            $scope.$class.icon, {\n                '1':  $attrs.iconExpand     || 'fa fa-fw fa-chevron-down',\n                '0':  $attrs.iconCollapse   || 'fa fa-fw fa-chevron-right',\n                '-1': $attrs.iconLeaf       || 'fa fa-fw'\n            }\n        );\n\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\n            if (angular.isFunction(fn)) {\n                var _i, _len, _nodes;\n\n                if (fn(node, parent)) {\n                    // have error or need ignore children\n                    return false;\n                }\n                _nodes = node.__children__;\n                _len   = _nodes ? _nodes.length : 0;\n                for (_i = 0; _i < _len; _i++) {\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\n                        // skip sibling of node checking\n                        return false;\n                    }\n                }\n            }\n            // succeed then continue\n            return true;\n        };\n\n        $scope.getLastDescendant = function (node) {\n            var last_child, n;\n            if (!node) {\n                node = $scope.tree ? $scope.tree.anchor_node : false;\n            }\n            if (node === false) {\n                return false;\n            }\n            n = node.__children__.length;\n            if (n === 0) {\n                return node;\n            } else {\n                last_child = node.__children__[n - 1];\n                return $scope.getLastDescendant(last_child);\n            }\n        };\n\n        $scope.getElementChilds = function () {\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n        };\n\n        $scope.onClick = function (node, event) {\n                  if (angular.isDefined($scope.tree)) {\n                    \n                    if (!event.metaKey && !event.shiftKey) {\n                      $scope.tree.select_anchor_node(node);\n                    }\n                    \n                    if (angular.isFunction($scope.tree.on_click)) {\n                      setTimeout(\n                        function () {\n                          $scope.tree.on_click(node);\n                        }, 0\n                      );\n                    }\n                  }\n                };\n\n        $scope.onSelect = function (node, event) {\n          if (angular.isDefined($scope.tree)) {\n            if (event.metaKey) {\n              // add to selection\n              $scope.tree.add_select_node(node);\n            } else if (event.shiftKey) {\n              // select all nodes between anchor and this\n              $scope.tree.range_select_node(node);\n            } else if (!node.__selected__) {\n              $scope.tree.select_anchor_node(node);\n            }\n\n            if (angular.isFunction($scope.tree.on_select)) {\n              setTimeout(\n                  function () {\n                    $scope.tree.on_select(node);\n                  }, 0\n              );\n            }\n          }\n        };\n\n        var passedExpand, _clone;\n        $scope.toggleExpand = function (node, fnCallback) {\n            passedExpand = true;\n            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\n                passedExpand = false;\n            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\n                passedExpand = false;\n            }\n\n            if (passedExpand) {\n                if (node.__children__.length > 0) {\n                    node.__expanded__ = !node.__expanded__;\n                }\n            }\n        };\n\n\n        var _fnGetHash    = function (node) {\n                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n            },\n            _fnSetHash    = function (node) {\n                var _hashKey = _fnGetHash(node);\n                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                    node.__hashKey__ = _hashKey;\n                }\n                return node;\n            };\n        $scope.getHash    = _fnGetHash;\n        $scope.$callbacks = {\n            getHash:             _fnGetHash,\n            setHash:             _fnSetHash,\n            for_all_descendants: $scope.for_all_descendants,\n            /*expand:              function (node) {\n             return true;\n             },*/\n            accept:              function (dragInfo, moveTo, isChanged) {\n                return $scope.dropEnabled === true;\n            },\n            calsIndent:          function (level, skipUnit, skipEdge) {\n                var unit = 0,\n                    edge = skipEdge ? 0 : $scope.indent_plus;\n                if (!skipUnit) {\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                }\n\n                if (level - 1 < 1) {\n                    return edge + unit;\n                } else {\n                    return $scope.indent * (level - 1) + edge + unit;\n                }\n            },\n            droppable:           function () {\n                return $scope.dropEnabled === true;\n            },\n            draggable:           function () {\n                return $scope.dragEnabled === true;\n            },\n            beforeDrop:          function (event) {\n                return true;\n            },\n            changeKey:           function (node) {\n                var _key     = node.__uid__;\n                node.__uid__ = Math.random();\n                if (node.__selected__) {\n                    delete node.__selected__;\n                }\n\n                if ($scope.primary_key !== '__uid__') {\n                    _key = '' + node[$scope.primary_key];\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                    node[$scope.primary_key] = _key;\n                }\n                // delete(node.__hashKey__);\n            },\n            clone:               function (node, _this) {\n                _clone = angular.copy(node);\n                this.for_all_descendants(_clone, this.changeKey);\n                return _clone;\n            },\n            remove:              function (node, parent, _this, delayReload) {\n                var temp = parent.splice(node.__index__, 1)[0];\n                if (!delayReload) {\n                    $scope.reload_data();\n                }\n                return temp;\n            },\n            clearInfo:           function (node) {\n                delete node.__inited__;\n                delete node.__visible__;\n\n                // always changed after call reload_data\n                //delete node.__hashKey__;\n            },\n            add:                 function (node, pos, parent, _this) {\n                // clearInfo\n                this.for_all_descendants(node, this.clearInfo);\n                if (parent) {\n                    if (parent.length > -1) {\n                        if (pos > -1) {\n                            parent.splice(pos, 0, node);\n                        } else {\n                            // todo If children need load crazy\n                            parent.push(node);\n                        }\n                    } else {\n                        parent.push(node);\n                    }\n                }\n            }\n        };\n\n        $scope.deleteScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\n                delete $scope.$globals[_hash];\n            }\n        };\n\n        $scope.setScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] !== scope) {\n                $scope.$globals[_hash] = scope;\n            }\n        };\n\n        $scope.getScope = function (node) {\n            if (node) {\n                var _hash = node.__hashKey__;\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\n                return $scope.$globals[_hash];\n            }\n            return $scope;\n        };\n\n        if ($attrs.enableDrag || $attrs.enableDrop) {\n            $scope.placeElm    = null;\n            //                            $scope.dragBorder = 30;\n            $scope.dragEnabled = null;\n            $scope.dropEnabled = null;\n            $scope.horizontal  = null;\n\n            if ($attrs.enableDrag) {\n\n                $scope.dragDelay       = 0;\n                $scope.enabledMove     = true;\n                $scope.statusMove      = true;\n                $scope.enabledHotkey   = false;\n                $scope.enabledCollapse = null;\n                $scope.statusElm       = null;\n                $scope.dragging        = null;\n\n                angular.extend(\n                    $scope.$callbacks, {\n                        beforeDrag: function (scopeDrag) {\n                            return true;\n                        },\n                        dragStop:   function (info, passed) {\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\n                                return null;\n                            }\n\n                            info.target.reload_data();\n\n                            if (info.target !== info.drag && info.drag.enabledMove) {\n                                info.drag.reload_data();\n                            }\n                        },\n                        dropped:    function (info, pass, isMove) {\n                            if (!info) {\n                                return null;\n                            }\n\n                            var _node = info.node,\n                                _nodes = info.nodes,\n                                _tree = info.drag.tree,\n                                _nodeAdd = null,\n                                _move = info.move,\n                                _parent = _move.parent\n\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                              if (isMove) {\n                                _tree.remove_nodes(_nodes, true);\n                              } else {\n                                _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                              }\n                              \n                              // If any of the nodes being moved were removed from the new parent \n                              // with an index before _move.pos, the new position will be incorrect.\n                              // The position will have to be corrected by subtracting the \n                              // number of nodes preceding _move.pos\n                                var startPos = _move.pos;\n                                \n                                if (info.drag === info.target) {\n                                  _nodes.forEach(function(node) {\n                                    var hasSameParent = _tree.get_parent(node) === _move.parent,\n                                        hasLowerIndex = node.__index__ < startPos;\n                                    if (hasSameParent && hasLowerIndex) {\n                                      _move.pos--;\n                                    }\n                                  });\n                                }\n                              \n                              // Add the nodes to the parent at the position.\n                              _tree.add_nodes(_parent, _nodes, _move.pos)\n\n                              return true;\n                            }\n\n                            return false;\n                        },\n                        dragStart:  function (event) {\n                        },\n                        dragMove:   function (event) {\n                        }\n                    }\n                );\n\n                $scope.setDragging = function (dragInfo) {\n                    $scope.dragging = dragInfo;\n                };\n\n                $scope.enableMove = function (val) {\n                    if (typeof val === 'boolean') {\n                        $scope.enabledMove = val;\n                    } else {\n                        $scope.enabledMove = true;\n                    }\n                };\n\n                if ($attrs.enableStatus) {\n                    $scope.enabledStatus = false;\n\n                    $scope.hideStatus = function () {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.addClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.refreshStatus = function () {\n                        if (!$scope.dragging) {\n                            return;\n                        }\n\n                        if ($scope.enabledStatus) {\n                            var statusElmOld = $scope.statusElm;\n                            if ($scope.enabledMove) {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                            } else {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                            }\n\n                            if (statusElmOld !== $scope.statusElm) {\n                                if (statusElmOld) {\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                    statusElmOld.remove();\n                                }\n                                $document.find('body').append($scope.statusElm);\n\n                            }\n\n                            $scope.statusElm.removeClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.setPositionStatus = function (e) {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.css(\n                                {\n                                    'left':    e.pageX + 10 + 'px',\n                                    'top':     e.pageY + 15 + 'px',\n                                    'z-index': 9999\n                                }\n                            );\n                            $scope.statusElm.addClass($scope.$class.status);\n                        }\n                    };\n                }\n            }\n\n            $scope.targeting = false;\n\n            $scope.getPrevSibling = function (node) {\n                if (node && node.__index__ > 0) {\n                    var _parent, _index = node.__index__ - 1;\n\n                    if (angular.isDefined(node.__parent_real__)) {\n                        _parent = $scope.tree_nodes[node.__parent_real__];\n                        return _parent.__children__[_index];\n                    }\n                    return $scope.treeData[_index];\n\n                }\n                return null;\n            };\n\n            $scope.getNode = function (index) {\n                if (angular.isUndefinedOrNull(index)) {\n                    return null;\n                }\n                return $scope.tree_nodes[index];\n            };\n\n            $scope.initPlace = function (element, dragElm) {\n\n                if (!$scope.placeElm) {\n                    if ($scope.isTable) {\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n                        var _len_down   = $scope.colDefinitions.length;\n                        $scope.placeElm.append(\n                            angular.element($window.document.createElement('td'))\n                                   .addClass($scope.$class.empty)\n                                   .addClass('indented')\n                                   .addClass($scope.$class.place)\n                        );\n                        while (_len_down-- > 0) {\n                            $scope.placeElm.append(\n                                angular.element($window.document.createElement('td'))\n                                       .addClass($scope.$class.empty)\n                                       .addClass($scope.$class.place)\n                            );\n                        }\n                    } else {\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                                                 .addClass($scope.$class.empty)\n                                                 .addClass($scope.$class.place);\n                    }\n\n                }\n\n                if (dragElm) {\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                }\n\n                if (element) {\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                } else {\n                    $scope.getElementChilds().append($scope.placeElm);\n                }\n\n                return $scope.placeElm;\n            };\n\n            $scope.hidePlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.addClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.showPlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.removeClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.getScopeTree = function () {\n                return $scope;\n            };\n\n        }\n\n        $scope.$safeApply = $safeApply;\n\n\n        $scope.hiddenChild       = function fnHiddenChild(node, parent) {\n            var nodeScope = $scope.getScope(node);\n            if (nodeScope) {\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    nodeScope.$element.removeClass($scope.$class.hidden);\n                    node.__visible__ = true;\n                } else {\n                    nodeScope.$element.addClass($scope.$class.hidden);\n                    node.__visible__ = false;\n                }\n            } else {\n                // show node & init scope\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    node.__visible__ = true;\n                } else {\n                    node.__visible__ = false;\n                }\n            }\n\n            // skip all child hiding... if not expaned\n            return node.__expanded__ === false;\n        }\n        var _fnInitFilter,\n            _fnInitOrderBy,\n            _fnGetControl,\n            _defaultFilterOption = {\n                showParent: true,\n                showChild:  false,\n                beginAnd:   true\n            },\n            tree,\n            _watches             = [\n                [\n                    'enableDrag', [\n                    ['boolean', 'enableStatus', null, 'enabledStatus'],\n                    ['boolean', 'enableMove', null, 'enabledMove'],\n                    ['number', 'dragDelay', 0, null, 0],\n                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\n                    [\n                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\n                        if (isHotkey) {\n                            $scope.enabledMove = false;\n                        } else {\n                            $scope.enabledMove = $scope.statusMove;\n                        }\n                    }]\n                ]],\n                [\n                    ['enableDrag', 'enableStatus'], [\n                    [\n                        'string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null,\n                        function (_url) {\n                            if (_url && $templateCache.get(_url)) {\n                                $TreeDnDTemplate.setCopy(_url, $scope);\n                            }\n                        }],\n                    [\n                        'string', 'templateMove', $attrs.templateMove, 'templateMove', null,\n                        function (_url) {\n                            if (_url && $templateCache.get(_url)) {\n                                $TreeDnDTemplate.setMove(_url, $scope);\n                            }\n                        }]\n                ]],\n                [\n                    [['enableDrag', 'enableDrop']], [\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\n                ],\n                [\n                    '*', [\n                    ['boolean', 'treeTable', true, 'treeTable', null],\n                    ['boolean', 'horizontal'],\n                    [\n                        'callback', 'treeClass', function (val) {\n                        switch (typeof val) {\n                            case 'string':\n                                $scope.$tree_class = val;\n                                break;\n                            case 'object':\n                                angular.extend($scope.$class, val);\n                                $scope.$tree_class = $scope.$class.tree;\n                                break;\n                            default:\n                                $scope.$tree_class = $attrs.treeClass;\n                                break;\n                        }\n                    }, 'treeClass', function () {\n                        $scope.$tree_class = $scope.$class.tree + ' table';\n                    }, null, function () {\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\n                            $scope.$tree_class = $attrs.treeClass.trim();\n                            return true;\n                        }\n                    }],\n                    [\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\n                        function (expandOn) {\n                            if (angular.isUndefinedOrNull(expandOn)) {\n                                $scope.expandingProperty = $attrs.expandOn;\n                            }\n                        }],\n                    [\n                        'object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\n                        'tree', null, function ($tree) {\n\n                        if (!angular.isFunction(_fnGetControl)) {\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                        }\n\n                        if (angular.isFunction(_fnGetControl)) {\n                            tree = angular.extend(\n                                $tree,\n                                _fnGetControl($scope)\n                            );\n                        }\n                    }],\n                    [\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\n                        function (colDefs) {\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                $scope.colDefinitions = getColDefs();\n                            }\n                        }],\n                    [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\n                    [\n                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\n                        var _passed = false;\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\n                            var _keysF = Object.keys(filters),\n                                _lenF  = _keysF.length, _iF;\n\n                            if (_lenF > 0) {\n                                for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\n                                        filters[_keysF[_iF]].length === 0) {\n                                        continue;\n                                    }\n                                    _passed = true;\n                                    break;\n                                }\n                            }\n                        }\n\n                        $scope.enabledFilter = _passed;\n                        reload_data();\n                    }],\n                    [\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\n                        _defaultFilterOption, function (option) {\n                        if (typeof option === 'object') {\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                        }\n                    }],\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\n                    ['number', 'indent', 30, null, 30],\n                    ['number', 'indentPlus', 20, null, 20],\n                    [\n                        'null', 'callbacks',\n                        function (optCallbacks) {\n                            angular.forEach(\n                                optCallbacks, function (value, key) {\n                                    if (typeof value === 'function') {\n                                        if ($scope.$callbacks[key]) {\n                                            $scope.$callbacks[key] = value;\n                                        }\n                                    }\n                                }\n                            );\n                            return $scope.$callbacks;\n                        },\n                        '$callbacks'\n                    ],\n                    [\n                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                        reload_data();\n                    }],\n                    ['number', 'treeLimit', 100, '$TreeLimit', 100],\n                    ['boolean', 'enableDrag', null, 'dragEnabled'],\n                    ['boolean', 'enableDrop', null, 'dropEnabled']\n                ]]\n            ],\n            w, lenW              = _watches.length,\n            i, len,\n            _curW,\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\n\n            // debounce reload_Data;\n            timeReloadData, tmpTreeData;\n\n        for (w = 0; w < lenW; w++) {\n            // skip if not exist\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\n                continue;\n            }\n            _curW = _watches[w][1];\n            for (i = 0, len = _curW.length; i < len; i++) {\n                _typeW    = _curW[i][0];\n                _nameW    = _curW[i][1];\n                _defaultW = _curW[i][2];\n                _scopeW   = _curW[i][3];\n                _NotW     = _curW[i][4];\n                _AfterW   = _curW[i][5];\n                _BeforeW  = _curW[i][6];\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n            }\n        }\n\n        if ($attrs.treeData) {\n            $scope.$watch(\n                $attrs.treeData, function (val) {\n                    if (angular.equals(val, $scope.treeData)) {\n                        return;\n                    }\n\n                    tmpTreeData = val;\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\n                        timeReloadData = $timeout(timeLoadData, 350);\n                    }\n                }, true\n            );\n        }\n\n        function timeLoadData() {\n            $scope.treeData = tmpTreeData;\n            reload_data();\n            timeReloadData = null;\n        }\n\n        $scope.updateLimit = function updateLimit() {\n            //console.log('Call fn UpdateLimit');\n            $scope.$TreeLimit += 50;\n        };\n\n        $scope.reload_data = reload_data;\n\n        function check_exist_attr(attrs, existAttr, isAnd) {\n            if (angular.isUndefinedOrNull(existAttr)) {\n                return false;\n            }\n\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                return true;\n            }\n\n            if (angular.isArray(existAttr)) {\n                return for_each_attrs(attrs, existAttr, isAnd);\n            }\n        }\n\n        function for_each_attrs(attrs, exist, isAnd) {\n            var i, len = exist.length, passed = false;\n\n            if (len === 0) {\n                return null;\n            }\n            for (i = 0; i < len; i++) {\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                    passed = true;\n                    if (!isAnd) {\n                        return true;\n                    }\n                } else {\n                    if (isAnd) {\n                        return false;\n                    }\n                }\n            }\n\n            return passed;\n        }\n\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\n                               fnBefore\n        ) {\n            nameScope = nameScope || nameAttr;\n            if (typeof type === 'string' || angular.isArray(type)) {\n                if (angular.isFunction(fnBefore) && fnBefore()) {\n                    return;//jmp\n                }\n                if (typeof $attrs[nameAttr] === 'string') {\n                    $scope.$watch(\n                        $attrs[nameAttr], function (val) {\n                            if (typeof type === 'string' && typeof val === type ||\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\n                            ) {\n                                $scope[nameScope] = val;\n                            } else {\n                                if (angular.isFunction(valDefault)) {\n                                    $scope[nameScope] = valDefault(val);\n                                } else {\n                                    $scope[nameScope] = valDefault;\n                                }\n                            }\n\n                            if (angular.isFunction(fnAfter)) {\n                                fnAfter($scope[nameScope], $scope);\n                            }\n                        }, true\n                    );\n                } else {\n\n                    if (angular.isFunction(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist();\n                    } else if (!angular.isUndefined(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist;\n                    }\n                }\n            }\n        }\n\n        function $safeApply(fn) {\n            var phase = this.$root.$$phase;\n            if (phase === '$apply' || phase === '$digest') {\n                if (fn && typeof fn === 'function') {\n                    fn();\n                }\n            } else {\n                this.$apply(fn);\n            }\n        }\n\n        function getExpandOn() {\n            if ($scope.treeData && $scope.treeData.length) {\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\n                    _regex                                 = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\n                    _len,\n                    i;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        $scope.expandingProperty = _keys[i];\n                        return;\n                    }\n                }\n\n                // Auto get first\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\n                    $scope.expandingProperty = _keys[0];\n                }\n\n            }\n        }\n\n        function getColDefs() {\n            // Auto get Defs except attribute __level__ ....\n            if ($scope.treeData.length) {\n                var _col_defs = [], _firstNode = $scope.treeData[0],\n                    _regex                     = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\n                    _keys                      = Object.keys(_firstNode),\n                    i, _len;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        _col_defs.push(\n                            {\n                                field: _keys[i]\n                            }\n                        );\n                    }\n                }\n                $scope.colDefinitions = _col_defs;\n            }\n        }\n\n        function do_f(root, node, parent, parent_real, level, visible, index) {\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\n            if (!angular.isArray(node.__children__)) {\n                node.__children__ = [];\n            }\n\n            node.__parent_real__ = parent_real;\n            node.__parent__      = parent;\n            _len                 = node.__children__.length;\n\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\n                node.__expanded__ = level < $scope.expandLevel;\n            }\n\n            if (_len === 0) {\n                _icon = -1;\n            } else {\n                if (node.__expanded__) {\n                    _icon = 1;\n                } else {\n                    _icon = 0;\n                }\n            }\n\n            // Insert item vertically\n            _index_real         = root.length;\n            node.__index__      = index;\n            node.__index_real__ = _index_real;\n            node.__level__      = level;\n            node.__icon__       = _icon;\n            node.__icon_class__ = $scope.$class.icon[_icon];\n            node.__visible__    = !!visible;\n\n            if (angular.isUndefinedOrNull(node.__uid__)) {\n                node.__uid__ = '' + Math.random();\n            }\n\n            _hashKey = $scope.getHash(node);\n\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                node.__hashKey__ = _hashKey;\n            }\n\n            root.push(node);\n\n            // Check node children\n            _dept = 1;\n            if (_len > 0) {\n                for (_i = 0; _i < _len; _i++) {\n                    _dept += do_f(\n                        root,\n                        node.__children__[_i],\n                        node[$scope.primary_key],\n                        _index_real,\n                        level + 1,\n                        visible && node.__expanded__,\n                        _i\n                    );\n                }\n            }\n\n            node.__dept__ = _dept;\n\n            return _dept;\n        }\n\n        function init_data(data) {\n\n            // clear memory\n            if (angular.isDefined($scope.tree_nodes)) {\n                delete $scope.tree_nodes;\n            }\n\n            $scope.tree_nodes = data;\n            return data;\n        }\n\n        function reload_data(oData) {\n            var _data,\n                _len,\n                _tree_nodes = [];\n            if (angular.isDefined(oData)) {\n                if (!angular.isArray(oData) || oData.length === 0) {\n                    return init_data([]);\n                } else {\n                    _data = oData;\n                }\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\n                return init_data([]);\n            } else {\n                _data = $scope.treeData;\n            }\n\n            if (!$attrs.expandOn) {\n                getExpandOn();\n            }\n\n            if (!$attrs.columnDefs) {\n                getColDefs();\n            }\n\n            if (angular.isDefined($scope.orderBy)) {\n                if (!angular.isFunction(_fnInitOrderBy)) {\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                }\n\n                if (angular.isFunction(_fnInitOrderBy)) {\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\n                }\n            }\n\n            if (angular.isDefined($scope.filter)) {\n                if (!angular.isFunction(_fnInitFilter)) {\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                }\n\n                if (angular.isFunction(_fnInitFilter)) {\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\n                }\n            }\n\n            _len = _data.length;\n            if (_len > 0) {\n                var _i,\n                    _deptTotal = 0;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\n                }\n\n            }\n\n            init_data(_tree_nodes);\n\n            return _tree_nodes;\n        }\n    }\n\n    function fnCompile(tElement) {\n\n        var $_Template = '',\n            _element   = tElement.html().trim();\n\n        if (_element.length > 0) {\n            $_Template = _element;\n            tElement.html('');\n        }\n\n        return function fnPost(scope, element, attrs) {\n\n            if (attrs.enableDrag) {\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                if (angular.isFunction(_fnInitDrag)) {\n                    _fnInitDrag(scope, element, $window, $document);\n                }\n            }\n\n            // kick out $digest\n            element.ready(function () {\n                // apply Template\n                function checkTreeTable(template, scope) {\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\n                        attrInclude;\n\n                    scope.isTable = null;\n                    if (elemNode) {\n                        elemNode    = angular.element(elemNode);\n                        attrInclude = elemNode.attr('ng-include');\n                    } else {\n                        return;\n                    }\n\n                    if (attrInclude) {\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\n                        if (typeof treeInclude === 'string') {\n                            return $http.get(\n                                treeInclude,\n                                {cache: $templateCache}\n                            ).success(\n                                function (data) {\n                                    data              = data.trim();\n                                    //scope.templateNode = data;\n                                    var tempDiv       = document.createElement('div');\n                                    tempDiv.innerHTML = data;\n                                    tempDiv           = angular.element(tempDiv);\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\n                                }\n                            );\n                        }\n                    } else {\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\n                        //scope.templateNode = elemNode.html();\n                    }\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\n                    //elemNode.html('');\n                }\n\n                //scope.$watch(tableDataLoaded, transformTable);\n                /*\n                 function tableDataLoaded(elem) {\n                 // first cell in the tbody exists when data is loaded but doesn't have a width\n                 // until after the table is transformed\n                 var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\n                 return firstCell && !firstCell.style.width;\n                 }\n\n                 function transformTable(elem, attrs) {\n                 // reset display styles so column widths are correct when measured below\n                 angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\n\n                 // wrap in $timeout to give table a chance to finish rendering\n                 $timeout(function () {\n                 // set widths of columns\n                 angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\n\n                 var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\n                 var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\n\n                 var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\n                 if (tdElems) {\n                 tdElems.style.width = columnWidth + 'px';\n                 }\n                 if (thElem) {\n                 thElem.style.width = columnWidth + 'px';\n                 }\n                 if (tfElems) {\n                 tfElems.style.width = columnWidth + 'px';\n                 }\n                 });\n\n                 // set css styles on thead and tbody\n                 angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\n\n                 angular.element(elem.querySelectorAll('tbody')).css({\n                 'display':  'block',\n                 'height':   attrs.tableHeight || 'inherit',\n                 'overflow': 'auto'\n                 });\n\n                 // reduce width of last column by width of scrollbar\n                 var tbody          = elem.querySelector('tbody');\n                 var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\n                 if (scrollBarWidth > 0) {\n                 // for some reason trimming the width by 2px lines everything up better\n                 scrollBarWidth -= 2;\n                 var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\n                 lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\n                 }\n                 });\n                 }*/\n                var promiseCheck;\n                if ($_Template.length > 0) {\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\n                    if (typeof promiseCheck === 'object') {\n                        promiseCheck.then(function () {\n                            element.append($compile($_Template)(scope));\n                        });\n                    } else {\n                        element.append($compile($_Template)(scope));\n                    }\n                } else {\n                    $http.get(\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                        {cache: $templateCache}\n                    ).success(\n                        function (data) {\n                            data         = angular.element(data.trim());\n                            promiseCheck = checkTreeTable(data, scope);\n                            if (typeof promiseCheck === 'object') {\n                                promiseCheck.then(function () {\n                                    element.append($compile(data)(scope));\n                                });\n                            } else {\n                                element.append($compile(data)(scope));\n                            }\n                        }\n                    );\n                }\n            })\n        };\n    }\n}\n\n\nangular.module('ntt.TreeDnD')\n       .factory(\n           '$TreeDnDConvert', function () {\n               var _$initConvert = {\n                   line2tree: function (data, primaryKey, parentKey, callback) {\n                       callback = typeof callback === 'function' ? callback : function () {\n                       };\n                       if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                           return [];\n                       }\n                       var tree     = [],\n                           rootIds  = [],\n                           item     = data[0],\n                           _primary = item[primaryKey],\n                           treeObjs = {},\n                           parentId, parent,\n                           len      = data.length,\n                           i        = 0;\n                       while (i < len) {\n                           item = data[i++];\n                           callback(item);\n                           _primary           = item[primaryKey];\n                           treeObjs[_primary] = item;\n                       }\n                       i = 0;\n                       while (i < len) {\n                           item = data[i++];\n                           callback(item);\n                           _primary           = item[primaryKey];\n                           treeObjs[_primary] = item;\n                           parentId           = item[parentKey];\n                           if (parentId) {\n                               parent = treeObjs[parentId];\n                               if (parent) {\n                                   if (parent.__children__) {\n                                       parent.__children__.push(item);\n                                   } else {\n                                       parent.__children__ = [item];\n                                   }\n                               }\n                           } else {\n                               rootIds.push(_primary);\n                           }\n                       }\n                       len = rootIds.length;\n                       for (i = 0; i < len; i++) {\n                           tree.push(treeObjs[rootIds[i]]);\n                       }\n                       return tree;\n                   },\n                   tree2tree: function access_child(data, containKey, callback) {\n                       callback  = typeof callback === 'function' ? callback : function () {\n                       };\n                       var _tree = [],\n                           _i,\n                           _len  = data ? data.length : 0,\n                           _copy, _child;\n                       for (_i = 0; _i < _len; _i++) {\n                           _copy = angular.copy(data[_i]);\n                           callback(_copy);\n                           if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\n                               _child = access_child(_copy[containKey], containKey, callback);\n                               delete _copy[containKey];\n                               _copy.__children__ = _child;\n                           }\n                           _tree.push(_copy);\n                       }\n                       return _tree;\n                   }\n               };\n\n               return _$initConvert;\n           }\n       );\n\nangular.module('ntt.TreeDnD')\n       .factory(\n           '$TreeDnDHelper', [\n               '$document', '$window', function ($document, $window) {\n                   var _$helper = {\n                       nodrag:          function (targetElm) {\n                           return typeof targetElm.attr('data-nodrag') !== 'undefined';\n                       },\n                       eventObj:        function (e) {\n                           var obj = e;\n                           if (e.targetTouches !== undefined) {\n                               obj = e.targetTouches.item(0);\n                           } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                               obj = e.originalEvent.targetTouches.item(0);\n                           }\n                           return obj;\n                       },\n                       dragInfo:        function (scope) {\n                           var _node   = scope.getData(),\n                               _tree   = scope.getScopeTree(),\n                               _parent = scope.getNode(_node.__parent_real__);\n                           return {\n                               node:    _node,\n                               nodes:    _tree.tree.get_selected_nodes(),\n                               parent:  _parent,\n                               move:    {\n                                   parent: _parent,\n                                   pos:    _node.__index__\n                               },\n                               scope:   scope,\n                               target:  _tree,\n                               drag:    _tree,\n                               drop:    scope.getPrevSibling(_node),\n                               changed: false\n                           };\n                       },\n                       height:          function (element) {\n                           return element.prop('scrollHeight');\n                       },\n                       width:           function (element) {\n                           return element.prop('scrollWidth');\n                       },\n                       offset:          function (element) {\n                           var boundingClientRect = element[0].getBoundingClientRect();\n                           return {\n                               width:  element.prop('offsetWidth'),\n                               height: element.prop('offsetHeight'),\n                               top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                               left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                           };\n                       },\n                       positionStarted: function (e, target) {\n                           var pos     = {};\n                           pos.offsetX = e.pageX - this.offset(target).left;\n                           pos.offsetY = e.pageY - this.offset(target).top;\n                           pos.startX  = pos.lastX = e.pageX;\n                           pos.startY = pos.lastY = e.pageY;\n                           pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\n                           pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\n                           return pos;\n                       },\n                       positionMoved:   function (e, pos, firstMoving) {\n                           // mouse position last events\n                           pos.lastX    = pos.nowX;\n                           pos.lastY    = pos.nowY;\n                           // mouse position this events\n                           pos.nowX     = e.pageX;\n                           pos.nowY     = e.pageY;\n                           // distance mouse moved between events\n                           pos.distX    = pos.nowX - pos.lastX;\n                           pos.distY    = pos.nowY - pos.lastY;\n                           // direction mouse was moving\n                           pos.lastDirX = pos.dirX;\n                           pos.lastDirY = pos.dirY;\n                           // direction mouse is now moving (on both axis)\n                           pos.dirX     = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                           pos.dirY     = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n                           // axis mouse is now moving on\n                           var newAx    = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n                           // do nothing on first move\n                           if (firstMoving) {\n                               pos.dirAx  = newAx;\n                               pos.moving = true;\n                               return;\n                           }\n                           // calc distance moved on this axis (and direction)\n                           if (pos.dirAx !== newAx) {\n                               pos.distAxX = 0;\n                               pos.distAxY = 0;\n                           } else {\n                               pos.distAxX += Math.abs(pos.distX);\n                               if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                                   pos.distAxX = 0;\n                               }\n                               pos.distAxY += Math.abs(pos.distY);\n                               if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                                   pos.distAxY = 0;\n                               }\n                           }\n                           pos.dirAx = newAx;\n                       },\n                       replaceIndent:   function (scope, element, indent, attr) {\n                           attr = attr || 'left';\n                           angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                       }\n                   };\n                   return _$helper;\n               }]\n       );\n\nangular.module('ntt.TreeDnD')\n       .factory(\n           '$TreeDnDPlugin', ['$injector', function ($injector) {\n               var _fnget = function (name) {\n                   if (angular.isDefined($injector) && $injector.has(name)) {\n                       return $injector.get(name);\n                   }\n                   return null;\n               };\n               return _fnget;\n           }]\n       );\n\nangular.module('ntt.TreeDnD')\n       .factory(\n           '$TreeDnDTemplate', [\n               '$templateCache', function ($templateCache) {\n                   var templatePath = 'template/TreeDnD/TreeDnD.html',\n                       copyPath     = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                       movePath     = 'template/TreeDnD/TreeDnDStatusMove.html',\n                       scopes       = {},\n                       temp,\n                       _$init       = {\n                           setMove: function (path, scope) {\n                               if (!scopes[scope.$id]) {\n                                   scopes[scope.$id] = {};\n                               }\n                               scopes[scope.$id].movePath = path;\n                           },\n                           setCopy: function (path, scope) {\n                               if (!scopes[scope.$id]) {\n                                   scopes[scope.$id] = {};\n                               }\n                               scopes[scope.$id].copyPath = path;\n                           },\n                           getPath: function () {\n                               return templatePath;\n                           },\n                           getCopy: function (scope) {\n                               if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                                   temp = $templateCache.get(scopes[scope.$id].copyPath);\n                                   if (temp) {\n                                       return temp;\n                                   }\n                               }\n                               return $templateCache.get(copyPath);\n                           },\n                           getMove: function (scope) {\n                               if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                                   temp = $templateCache.get(scopes[scope.$id].movePath);\n                                   if (temp) {\n                                       return temp;\n                                   }\n                               }\n                               return $templateCache.get(movePath);\n                           }\n                       };\n\n                   return _$init;\n               }]\n       );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\n\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\n\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\n\n    var viewport      = null,\n        isUpdating    = false,\n        isRender      = false,\n        updateAgain   = false,\n        viewportRect,\n        items         = [],\n        nodeTemplate,\n        updateTimeout,\n        renderTime,\n        $initViewport = {\n            setViewport:   setViewport,\n            getViewport:   getViewport,\n            add:           add,\n            setTemplate:   setTemplate,\n            getItems:      getItems,\n            updateDelayed: updateDelayed\n        },\n        eWindow       = angular.element($window);\n\n    eWindow.on('load resize scroll', updateDelayed);\n\n    return $initViewport;\n\n    function update() {\n\n        viewportRect = {\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\n        };\n\n        if (isUpdating || isRender) {\n            updateAgain = true;\n            return;\n        }\n        isUpdating = true;\n\n        recursivePromise();\n    }\n\n    function recursivePromise() {\n        if (isRender) {\n            return;\n        }\n\n        var number = number > 0 ? number : items.length, item;\n\n        if (number > 0) {\n            item = items[0];\n\n            isRender   = true;\n            renderTime = $timeout(function () {\n                //item.element.html(nodeTemplate);\n                //$compile(item.element.contents())(item.scope);\n\n                items.splice(0, 1);\n                isRender = false;\n                number--;\n                $timeout.cancel(renderTime);\n                recursivePromise();\n            }, 0);\n\n        } else {\n            isUpdating = false;\n            if (updateAgain) {\n                updateAgain = false;\n                update();\n            }\n        }\n\n    }\n\n    /**\n     * Check if a point is inside specified bounds\n     * @param x\n     * @param y\n     * @param bounds\n     * @returns {boolean}\n     */\n    function pointIsInsideBounds(x, y, bounds) {\n        return x >= bounds.left &&\n               y >= bounds.top &&\n               x <= bounds.left + bounds.width &&\n               y <= bounds.top + bounds.height;\n    }\n\n    /**\n     * @name setViewport\n     * @desciption Set the viewport element\n     * @param element\n     */\n    function setViewport(element) {\n        viewport = element;\n    }\n\n    /**\n     * Return the current viewport\n     * @returns {*}\n     */\n    function getViewport() {\n        return viewport;\n    }\n\n    /**\n     * trigger an update\n     */\n    function updateDelayed() {\n        $timeout.cancel(updateTimeout);\n        updateTimeout = $timeout(function () {\n            update();\n        }, 0);\n    }\n\n    /**\n     * Add listener for event\n     * @param element\n     * @param callback\n     */\n    function add(scope, element) {\n        updateDelayed();\n        items.push({\n            element: element,\n            scope:   scope\n        });\n    }\n\n    function setTemplate(scope, template) {\n        nodeTemplate = template;\n    }\n\n    /**\n     * Get list of items\n     * @returns {Array}\n     */\n    function getItems() {\n        return items;\n    }\n}\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDFilter', [\n        '$filter', function ($filter) {\n            return fnInitFilter;\n\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                if (!angular.isFunction(fnBefore)) {\n                    return null;\n                }\n\n                var _i, _len, _nodes,\n                    _nodePassed  = fnBefore(options, node),\n                    _childPassed = false,\n                    _filter_index = options.filter_index;\n\n                if (angular.isDefined(node[fieldChild])) {\n                    _nodes = node[fieldChild];\n                    _len   = _nodes.length;\n                    options.filter_index = 0;\n                    for (_i = 0; _i < _len; _i++) {\n                        _childPassed = for_all_descendants(\n                                options,\n                                _nodes[_i],\n                                fieldChild,\n                                fnBefore,\n                                fnAfter,\n                                       _nodePassed || parentPassed\n                            ) || _childPassed;\n                    }\n\n                    // restore filter_index of node\n                    options.filter_index = _filter_index;\n                }\n\n                if (angular.isFunction(fnAfter)) {\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                }\n\n                return _nodePassed || _childPassed;\n            }\n\n            /**\n             * Check data with callback\n             * @param {string|object|function|regex} callback\n             * @param {*} data\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnCheck(callback, data) {\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\n                    return null;\n                }\n\n                if (angular.isFunction(callback)) {\n                    return callback(data, $filter);\n                } else {\n                    if (typeof callback === 'boolean') {\n                        data = !!data;\n                        return data === callback;\n                    } else if (angular.isDefined(callback)) {\n                        try {\n                            var _regex = new RegExp(callback);\n                            return _regex.test(data);\n                        }\n                        catch (err) {\n                            if (typeof data === 'string') {\n                                return data.indexOf(callback) > -1;\n                            } else {\n                                return null;\n                            }\n                        }\n                    } else {\n                        return null;\n                    }\n                }\n            }\n\n            /**\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\n             *\n             * @param node\n             * @param condition\n             * @param isAnd\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnProccess(node, condition, isAnd) {\n                if (angular.isArray(condition)) {\n                    return for_each_filter(node, condition, isAnd);\n                } else {\n                    var _key      = condition.field,\n                        _callback = condition.callback,\n                        _iO, _keysO, _lenO;\n\n                    if (_key === '_$') {\n                        _keysO = Object.keys(node);\n                        _lenO  = _keysO.length;\n                        for (_iO = 0; _iO < _lenO; _iO++) {\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                return true;\n                            }\n                        }\n                    } else if (angular.isDefined(node[_key])) {\n                        return _fnCheck(_callback, node[_key]);\n                    }\n                }\n                return null;\n            }\n\n            /**\n             *\n             * @param {object} node\n             * @param {array} conditions Array `conditions`\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\n             * @returns {null|boolean}\n             */\n            function for_each_filter(node, conditions, isAnd) {\n                var i, len = conditions.length || 0, passed = false;\n                if (len === 0) {\n                    return null;\n                }\n\n                for (i = 0; i < len; i++) {\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\n                        passed = true;\n                        // if condition `or` then return;\n                        if (!isAnd) {\n                            return true;\n                        }\n                    } else {\n\n                        // if condition `and` and result in fnProccess = false then return;\n                        if (isAnd) {\n                            return false;\n                        }\n                    }\n                }\n\n                return passed;\n            }\n\n            /**\n             * Will call _fnAfter to clear data no need\n             * @param {object} options\n             * @param {object} node\n             * @param {boolean} isNodePassed\n             * @param {boolean} isChildPassed\n             * @param {boolean} isParentPassed\n             * @private\n             */\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                if (isNodePassed === true) {\n                    node.__filtered__         = true;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__ = options.filter_index++;\n                    return; //jmp\n                } else if (isChildPassed === true && options.showParent === true\n                           || isParentPassed === true && options.showChild === true) {\n                    node.__filtered__         = false;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__ = options.filter_index++;\n                    return; //jmp\n                }\n\n                // remove attr __filtered__\n                delete node.__filtered__;\n                delete node.__filtered_visible__;\n                delete node.__filtered_index__;\n            }\n\n            /**\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnBefore(options, node) {\n                if (options.filter.length === 0) {\n                    return true;\n                } else {\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\n                }\n            }\n\n            /**\n             * `fnBeforeClear` will called when `for_all_descendants` of `node` checking.\n             * Alway false to Clear Filter empty\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnBeforeClear(options, node) {\n                return false;\n            }\n\n            /**\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\n             *\n             * @param {object|array} filters\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\n             * @private\n             */\n            function _fnConvert(filters) {\n                var _iF, _lenF, _keysF,\n                    _filter,\n                    _state;\n                // convert filter object to array filter\n                if (angular.isObject(filters) && !angular.isArray(filters)) {\n                    _keysF  = Object.keys(filters);\n                    _lenF   = _keysF.length;\n                    _filter = [];\n\n                    if (_lenF > 0) {\n                        for (_iF = 0; _iF < _lenF; _iF++) {\n\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\n                                continue;\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                _state = filters[_keysF[_iF]];\n                            } else if (angular.isObject(filters[_keysF[_iF]])) {\n                                _state = _fnConvert(filters[_keysF[_iF]]);\n                            } else {\n                                _state = {\n                                    field:    _keysF[_iF],\n                                    callback: filters[_keysF[_iF]]\n                                };\n                            }\n                            _filter.push(_state);\n                        }\n                    }\n                    _state = null;\n                    return _filter;\n                }\n                else {\n                    return filters;\n                }\n            }\n\n            /**\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\n             * @constructor\n             * @param {object|array} treeData\n             * @param {object|array} filters\n             * @param {object} options\n             * @param {string} keyChild\n             * @returns {array} Return `treeData` or `treeData` with `filter`\n             * @private\n             */\n            function fnInitFilter(treeData, filters, options, keyChild) {\n                if (!angular.isArray(treeData)\n                    || treeData.length === 0) {\n                    return treeData;\n                }\n\n                var _i, _len,\n                    _filter;\n\n                _filter = _fnConvert(filters);\n                if (!(angular.isArray(_filter) || angular.isObject(_filter))\n                    || _filter.length === 0) {\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            options,\n                            treeData[_i],\n                            keyChild || '__children__',\n                            _fnBeforeClear, _fnAfter\n                        );\n                    }\n                    return treeData;\n                }\n\n                options.filter = _filter;\n                options.filter_index = 0;\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                    for_all_descendants(\n                        options,\n                        treeData[_i],\n                        keyChild || '__children__',\n                        _fnBefore, _fnAfter\n                    );\n                }\n\n                return treeData;\n            }\n\n        }]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDOrderBy', [\n        '$filter', function ($filter) {\n            var _fnOrderBy = $filter('orderBy'),\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (angular.isDefined(node[name])) {\n                        _nodes = node[name];\n                        _len = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n                    return node;\n                },\n                _fnOrder = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n                _fnMain = function _fnMain(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)) {\n                        return treeData;\n                    }\n\n                    var _i, _len;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    return _fnOrder(treeData, orderBy);\n                };\n\n            return _fnMain;\n        }]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n            function _fnPlaceHolder(e, $params) {\n                if ($params.placeElm) {\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                    ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function _fnDragStart(e, $params) {\n                \n                if (!$params.hasTouch && (e.button === 2 || e.which === 3 || e.metaKey || e.shiftKey)) {\n                  // disable right click\n                  return;\n                }\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\n                  return;\n                }\n                // the element which is clicked.\n                var eventElm = angular.element(e.target),\n                    eventScope = eventElm.scope();\n                if (!eventScope || !eventScope.$type) {\n                  return;\n                }\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                //     return;\n                // }\n\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                  return;\n                }\n\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                    dragScope,\n                    _$scope = $params.$scope;\n                if (eventElmTagName === 'input'\n                    || eventElmTagName === 'textarea'\n                    || eventElmTagName === 'button'\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                  return;\n                }\n                // check if it or it's parents has a 'data-nodrag' attribute\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                  if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                    return;\n                  }\n                  eventElm = eventElm.parent();\n                }\n\n                e.uiTreeDragging = true; // stop event bubbling\n                if (e.originalEvent) {\n                  e.originalEvent.uiTreeDragging = true;\n                }\n                e.preventDefault();\n\n                dragScope = eventScope.getScopeNode();\n\n                $params.firstMoving = true;\n\n                if (!_$scope.$callbacks.beforeDrag(dragScope)) {\n                  return;\n                }\n\n                var eventObj = $TreeDnDHelper.eventObj(e),\n                    tagName = dragScope.$element.prop('tagName').toLowerCase(),\n                    isTable = tagName === 'tr';\n\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\n\n                _$scope.setDragging($params.dragInfo);\n\n                $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                if (isTable) {\n                  $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                      .addClass(_$scope.$class.tree)\n                      .addClass(_$scope.$class.drag)\n                      .addClass(_$scope.$tree_class);\n                } else {\n                  $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                      .addClass(_$scope.$class.hidden)\n                      .addClass('tree-dnd-nodes')\n                      .addClass(_$scope.$tree_class);\n                }\n\n                $params.dragElm.css(\n                    {\n                      'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                      'z-index': 9995\n                    }\n                );\n\n                $params.offsetEdge = 0;\n                var _width = $TreeDnDHelper.width(dragScope.$element),\n                    _scope = dragScope,\n                    _element = _scope.$element,\n                    _clone = null,\n                    _needCollapse = !!_$scope.enabledCollapse,\n                    _copied = false,\n                    _tbody = null;\n\n                if (isTable) {\n                  $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n                  _tbody = angular.element($params.$window.document.createElement('tbody'));\n\n                  _$scope.for_all_descendants(\n                      $params.dragInfo.node, function (_node) {\n                        _scope = _$scope.getScope(_node);\n                        _element = _scope.$element;\n\n                        if (!_copied) {\n                          _clone = _element.clone();\n\n                          $TreeDnDHelper.replaceIndent(\n                              _scope,\n                              _clone,\n                              _node.__level__ - $params.offsetEdge,\n                              'padding-left'\n                          );\n\n                          _tbody.append(_clone);\n\n                          // skip all, just clone parent\n                          if (_needCollapse) {\n                            _copied = true;\n                          }\n                        }\n\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\n                          _element.addClass(_$scope.$class.hidden);\n                        }\n                      }\n                  );\n\n                  $params.dragElm.append(_tbody);\n                } else {\n\n                  if (!_needCollapse) {\n                    _clone = _element.clone();\n                  } else {\n                    var _holder = _scope.getElementChilds(),\n                        _swaper = angular.element('<swaped />');\n\n                    // Insert tag `<holder>` & move _holder into tag `<swaper>`;\n                    _holder.after(angular.element('<holder />'));\n                    _swaper.append(_holder);\n\n                    // Clone without Children & remove tag `<holder>`\n                    _clone = _element.clone();\n                    _clone.find('holder').remove();\n\n                    // bring childs back frome `swaper` & remove tag `<swaper>`\n                    _element.find('holder').replaceWith(_holder);\n\n                    // Reset & clear all;\n                    _swaper.remove();\n                    _holder = null;\n                  }\n\n                  $params.dragElm.append(_clone);\n                  if (_$scope.enabledMove && _$scope.$class.hien) {\n                    _element.addClass(_$scope.$class.hidden);\n                  }\n                }\n\n                $params.dragElm.css(\n                    {\n                      'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                          $params.offsetEdge + 1,\n                          true,\n                          true\n                      )       + 'px',\n                      'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                    }\n                );\n                // moving item with descendant\n                $params.$document.find('body').append($params.dragElm);\n                if (_$scope.$callbacks.droppable()) {\n                  $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                  if (isTable) {\n                    $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                  }\n\n                  $params.placeElm.css('width', _width);\n                }\n\n                _$scope.hidePlace();\n                _$scope.targeting = true;\n\n                if (_$scope.enabledStatus) {\n                  _$scope.refreshStatus();\n                  _$scope.setPositionStatus(e);\n                }\n\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                $params.document_height = Math.max(\n                    $params.body.scrollHeight,\n                    $params.body.offsetHeight,\n                    $params.html.clientHeight,\n                    $params.html.scrollHeight,\n                    $params.html.offsetHeight\n                );\n\n                $params.document_width = Math.max(\n                    $params.body.scrollWidth,\n                    $params.body.offsetWidth,\n                    $params.html.clientWidth,\n                    $params.html.scrollWidth,\n                    $params.html.offsetWidth\n                );\n            }\n\n            function _fnDragMove (e, $params) {\n                var _$scope = $params.$scope;\n                if (!$params.dragStarted) {\n                  if (!$params.dragDelaying) {\n                    $params.dragStarted = true;\n                    _$scope.$safeApply(\n                        function () {\n                          _$scope.$callbacks.dragStart($params.dragInfo);\n                        }\n                    );\n                  }\n                  return;\n                }\n\n                if ($params.dragElm) {\n                  e.preventDefault();\n                  if ($params.$window.getSelection) {\n                    $params.$window.getSelection().removeAllRanges();\n                  } else if ($params.$window.document.selection) {\n                    $params.$window.document.selection.empty();\n                  }\n\n                  var eventObj = $TreeDnDHelper.eventObj(e),\n                      leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                      topElmPos = eventObj.pageY - $params.pos.offsetY;\n\n                  //dragElm can't leave the screen on the left\n                  if (leftElmPos < 0) {\n                    leftElmPos = 0;\n                  }\n\n                  //dragElm can't leave the screen on the top\n                  if (topElmPos < 0) {\n                    topElmPos = 0;\n                  }\n\n                  //dragElm can't leave the screen on the bottom\n                  if (topElmPos + 10 > $params.document_height) {\n                    topElmPos = $params.document_height - 10;\n                  }\n\n                  //dragElm can't leave the screen on the right\n                  if (leftElmPos + 10 > $params.document_width) {\n                    leftElmPos = $params.document_width - 10;\n                  }\n\n                  $params.dragElm.css(\n                      {\n                        'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                            $params.offsetEdge + 1,\n                            true,\n                            true\n                        )       + 'px',\n                        'top':  topElmPos + 'px'\n                      }\n                  );\n\n                  if (_$scope.enabledStatus) {\n                    _$scope.setPositionStatus(e);\n                  }\n\n                  var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                      bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                  // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                  if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                    window.scrollBy(0, 10);\n                  }\n                  // to scroll top if cursor y-position is less than the top position the vertical scroll\n                  if (top_scroll > eventObj.pageY) {\n                    window.scrollBy(0, -10);\n                  }\n\n                  $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                  if ($params.firstMoving) {\n                    $params.firstMoving = false;\n                    return;\n                  }\n                  // check if add it as a child node first\n\n                  var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                      targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                      targetElm,\n                      targetScope,\n                      targetBefore,\n                      targetInside,\n                      targetOffset,\n                      tagName,\n                      isTable,\n                      isChanged = true,\n                      isVeritcal = true,\n                      isEmpty,\n                      isSwapped,\n                      _scope,\n                      _target,\n                      _parent,\n                      _info = $params.dragInfo,\n                      _move = _info.move,\n                      _drag = _info.node,\n                      _drop = _info.drop,\n                      treeScope = _info.target,\n                      fnSwapTree,\n                      isHolder = _fnPlaceHolder(e, $params);\n\n                  if (!isHolder) {\n                    /* when using elementFromPoint() inside an iframe, you have to call\n                     elementFromPoint() twice to make sure IE8 returns the correct value\n                     $params.$window.document.elementFromPoint(targetX, targetY);*/\n\n                    targetElm = angular.element(\n                        $params.$window.document.elementFromPoint(\n                            targetX,\n                            targetY\n                        )\n                    );\n\n                    targetScope = targetElm.scope();\n                    if (!targetScope) {\n                      return;\n                    }\n\n                    fnSwapTree = function () {\n                      treeScope = targetScope.getScopeTree();\n                      _target = _info.target;\n                      if (_info.target !== treeScope) {\n                        if (treeScope.$callbacks.droppable()) {\n                          // Replace by place-holder new\n                          _target.hidePlace();\n                          _target.targeting = false;\n                          treeScope.targeting = true;\n\n                          _info.target = treeScope;\n                          $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                          _target = null;\n                          isSwapped = true;\n                        } else {\n                          // Not allowed Drop Item\n                          return false;\n                        }\n                      }\n                      return true;\n                    };\n\n                    if (angular.isFunction(targetScope.getScopeNode)) {\n                      targetScope = targetScope.getScopeNode();\n                      if (!fnSwapTree()) {\n                        return;\n                      }\n                    } else {\n                      if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                        if (targetScope.tree_nodes) {\n                          if (targetScope.tree_nodes.length === 0) {\n                            if (!fnSwapTree()) {\n                              return;\n                            }\n                            // Empty\n                            isEmpty = true;\n                          }\n                        } else {\n                          return;\n                        }\n                      } else {\n                        return;\n                      }\n                    }\n                  }\n\n                  if ($params.pos.dirAx && !isSwapped || isHolder) {\n                    isVeritcal = false;\n                    targetScope = _info.scope;\n                  }\n\n                  if (!targetScope.$element && !targetScope) {\n                    return;\n                  }\n\n                  tagName = targetScope.$element.prop('tagName').toLowerCase();\n                  isTable = tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td';\n                  if (isEmpty) {\n                    _move.parent = null;\n                    _move.pos = 0;\n\n                    _drop = null;\n                  } else {\n                    // move vertical\n                    if (isVeritcal) {\n                      targetElm = targetScope.$element; // Get the element of tree-dnd-node\n\n                      targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                      if (targetScope.horizontal && !isTable) {\n                        targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\n                      } else {\n                        if (isTable) {\n                          targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\n                        } else {\n                          var _height = $TreeDnDHelper.height(targetElm);\n\n                          if (targetScope.getElementChilds()) {\n                            _height -= $TreeDnDHelper.height(targetScope.getElementChilds());\n                          }\n\n                          if (eventObj.pageY > targetOffset.top + _height) {\n                            return;\n                          }\n                          targetBefore = eventObj.pageY < targetOffset.top + _height * 0.5;\n                          targetInside = eventObj.pageY > targetOffset.top + _height * 0.25 &&\n                              eventObj.pageY < targetOffset.top + _height * 0.75;\n                        }\n                      }\n\n                      if (!angular.isFunction(targetScope.getData)) {\n                        return;\n                      }\n\n                      _target = targetScope.getData();\n                      _parent = targetScope.getNode(_target.__parent_real__);\n\n                      if(_target.groupId && targetInside) {\n                        _move.parent = _target;\n                        _move.pos = 0;\n                        _drop = null;\n                      } else if (targetBefore) {\n                        var _prev = targetScope.getPrevSibling(_target);\n\n                        _move.parent = _parent;\n                        _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1: 0;\n\n                        _drop = _prev;\n                      } else {\n                        if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                          _move.parent = _target;\n                          _move.pos = 0;\n\n                          _drop = null;\n                        } else {\n                          _move.parent = _parent;\n                          _move.pos = _target.__index__ + 1;\n\n                          _drop = _target;\n                        }\n                      }\n                    } else {\n                      // move horizontal\n                      if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                        $params.pos.distAxX = 0;\n                        // increase horizontal level if previous sibling exists and is not collapsed\n                        if ($params.pos.distX > 0) {\n                          _parent = _drop;\n                          if (!_parent) {\n                            if (_move.pos - 1 >= 0) {\n                              _parent = _move.parent.__children__[_move.pos - 1];\n                            } else {\n                              return;\n                            }\n                          }\n\n                          if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                            _parent = treeScope.getPrevSibling(_parent);\n                          }\n\n                          if (_parent && _parent.__visible__) {\n                            var _len = _parent.__children__.length;\n\n                            _move.parent = _parent;\n                            _move.pos = _len;\n\n                            if (_len > 0) {\n                              _drop = _parent.__children__[_len - 1];\n                            } else {\n                              _drop = null;\n                            }\n                          } else {\n                            // Not changed\n                            return;\n                          }\n                        } else if ($params.pos.distX < 0) {\n                          _target = _move.parent;\n                          if (_target &&\n                              (_target.__children__.length === 0 ||\n                              _target.__children__.length - 1 < _move.pos ||\n                              _info.drag === _info.target &&\n                              _target.__index_real__ === _drag.__parent_real__ &&\n                              _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\n                          ) {\n                            _parent = treeScope.getNode(_target.__parent_real__);\n\n                            _move.parent = _parent;\n                            _move.pos = _target.__index__ + 1;\n\n                            _drop = _target;\n                          } else {\n                            // Not changed\n                            return;\n                          }\n                        } else {\n                          return;\n                        }\n                      } else {\n                        // limited\n                        return;\n                      }\n                    }\n                  }\n\n                  if (_info.drag === _info.target &&\n                      _move.parent &&\n                      _drag.__parent_real__ === _move.parent.__index_real__ &&\n                      _drag.__index__ === _move.pos\n                  ) {\n                    isChanged = false;\n                  }\n\n                  if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                    _info.move = _move;\n                    _info.drop = _drop;\n                    _info.changed = isChanged;\n                    _info.scope = targetScope;\n                    if (isTable) {\n                      $TreeDnDHelper.replaceIndent(\n                          treeScope,\n                          $params.placeElm,\n                          angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                      );\n\n                      if (_drop) {\n                        _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\n                        if (_drop.__index__ < _parent.length - 1) {\n                          // Find fast\n                          _drop = _parent[_drop.__index__];\n                          _scope = _info.target.getScope(_drop);\n                          _scope.$element[0].parentNode.insertBefore(\n                              $params.placeElm[0],\n                              _scope.$element[0]\n                          );\n                        } else {\n                          _target = _info.target.getLastDescendant(_drop);\n                          _scope = _info.target.getScope(_target);\n                          _scope.$element.after($params.placeElm);\n                        }\n                      } else {\n                        _scope = _info.target.getScope(_move.parent);\n                        if (_scope) {\n                          if (_move.parent) {\n                            _scope.$element.after($params.placeElm);\n                            \n                          } else {\n                            _scope.getElementChilds().prepend($params.placeElm);\n                          }\n                        }\n                      }\n                    } else {\n                      _scope = _info.target.getScope(_drop || _move.parent);\n\n                      if ($params.lastParent) {\n                        $params.lastParent.removeClass('tree-dnd-dragover')\n                      }\n                      \n                      var shouldShowPlace = true;\n                      \n                      if (_drop) {\n                        _scope.$element.after($params.placeElm);\n                      } else {\n                        if (_move.parent) {\n                          $params.lastParent = _scope.$element;\n                          if (_move.parent.__expanded__) {\n                            _scope.getElementChilds().prepend($params.placeElm);\n                          } else {\n                            _scope.$element.addClass('tree-dnd-dragover');\n                            shouldShowPlace = false;\n                          }\n                        } else {\n                          _scope.getElementChilds().prepend($params.placeElm);\n                        }\n                      }\n                    }\n                    \n                    if (shouldShowPlace) {\n                      treeScope.showPlace()\n                    } else {\n                      treeScope.hidePlace();\n                    }\n\n                    _$scope.$safeApply(\n                        function () {\n                          _$scope.$callbacks.dragMove(_info);\n                        }\n                    );\n                  }\n\n                }\n              }\n\n            function _fnDragEnd(e, $params) {\n                e.preventDefault();\n                if ($params.dragElm) {\n                  var _passed = false,\n                      _$scope = $params.$scope,\n                      _scope = _$scope.getScope($params.dragInfo.node),\n                      tagName = _scope.$element.prop('tagName').toLowerCase(),\n                      _isTable = tagName === 'tr',\n                      _element = _scope.$element;\n\n                  _$scope.$safeApply(\n                      function () {\n                        _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                      }\n                  );\n\n                  // rollback all\n                  if ( _isTable ) {\n                    _$scope.for_all_descendants(\n                        $params.dragInfo.node, function (_node) {\n                          _scope = _$scope.getScope(_node);\n                          _element = _scope.$element;\n\n                          if (_scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                          }\n                        }\n                    );\n                  } else {\n                    if (_$scope.$class.hidden) {\n                      _element.removeClass(_$scope.$class.hidden);\n                    }\n                  }\n\n                  $params.dragElm.remove();\n                  $params.dragElm = null;\n\n                  if ($params.lastParent) {\n                    $params.lastParent.removeClass('tree-dnd-dragover')\n                  }\n\n                  if (_$scope.enabledStatus) {\n                    _$scope.hideStatus();\n                  }\n\n                  var _status = false;\n                  if (_$scope.$$apply) {\n                    _$scope.$safeApply(\n                        function () {\n                          _status = _$scope.$callbacks.dropped(\n                              $params.dragInfo,\n                              _passed,\n                              _$scope.enabledMove\n                          );\n                        }\n                    );\n                  } else {\n                    _fnBindDrag($params);\n                  }\n\n                  _$scope.$safeApply(\n                      function () {\n                        _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                      }\n                  );\n\n                  $params.dragInfo.target.hidePlace();\n                  $params.dragInfo.target.targeting = false;\n\n                  $params.dragInfo = null;\n                  _$scope.$$apply = false;\n                  _$scope.setDragging(null);\n                }\n\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n              }\n\n            function _fnDragStartEvent(e, $params) {\n                if ($params.$scope.$callbacks.draggable()) {\n                    _fnDragStart(e, $params);\n                }\n            }\n\n            function _fnBindDrag($params) {\n                $params.element.bind(\n                    'touchstart mousedown', function (e) {\n                        _fnDragStartEvent(e, $params);\n                        $params.dragDelaying = true;\n                        $params.dragStarted  = false;\n                        $params.dragTimer    = $timeout(\n                            function () {\n                                $params.dragDelaying = false;\n                            }, $params.$scope.dragDelay\n                        );\n                    }\n                );\n\n                $params.element.bind(\n                    'touchend touchcancel mouseup', function () {\n                        $timeout.cancel($params.dragTimer);\n                    }\n                );\n            }\n\n            function _fnKeydownHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (e.keyCode === 27) {\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    _$scope.$$apply = false;\n                    _fnDragEnd(e, $params);\n                } else {\n                    if (_$scope.enabledHotkey && e.shiftKey) {\n                        _$scope.enableMove(true);\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return;\n                        }\n\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\n                            _element = _scope.$element;\n\n                        if (_scope.isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node, _parent) {\n                                    _scope   = _$scope.getScope(_node);\n                                    _element = _scope && _scope.$element;\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n                                    return _node.__visible__ === false || _node.__expanded__ === false\n\n                                }, null, true\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.addClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function _fnKeyupHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (_$scope.enabledHotkey && !e.shiftKey) {\n                    _$scope.enableMove(false);\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                    }\n\n                    if (!$params.dragInfo) {\n                        return;\n                    }\n\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false\n                            }, null, true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n                }\n            }\n\n            function _$init(scope, element, $window, $document) {\n                var $params        = {\n                        hasTouch:        'ontouchstart' in window,\n                        firstMoving:     null,\n                        dragInfo:        null,\n                        pos:             null,\n                        placeElm:        null,\n                        dragElm:         null,\n                        dragDelaying:    true,\n                        dragStarted:     false,\n                        dragTimer:       null,\n                        body:            document.body,\n                        html:            document.documentElement,\n                        document_height: null,\n                        document_width:  null,\n                        offsetEdge:      null,\n                        $scope:          scope,\n                        $window:         $window,\n                        $document:       $document,\n                        element:         element,\n                        bindDrag:        function () {\n                            _fnBindDrag($params);\n                        },\n                        dragEnd:         function (e) {\n                            _fnDragEnd(e, $params);\n                        },\n                        dragMoveEvent:   function (e) {\n                            _fnDragMove(e, $params);\n                        },\n                        dragEndEvent:    function (e) {\n                            scope.$$apply = true;\n                            _fnDragEnd(e, $params);\n                        },\n                        dragCancelEvent: function (e) {\n                            _fnDragEnd(e, $params);\n                        }\n                    },\n                    keydownHandler = function (e) {\n                        return _fnKeydownHandler(e, $params);\n                    },\n                    keyupHandler   = function (e) {\n                        return _fnKeyupHandler(e, $params);\n                    };\n\n                scope.dragEnd = function (e) {\n                    $params.dragEnd(e);\n                };\n\n                $params.bindDrag();\n\n                angular.element($window.document.body).bind('keydown', keydownHandler);\n                angular.element($window.document.body).bind('keyup', keyupHandler);\n                //unbind handler that retains scope\n                scope.$on(\n                    '$destroy', function () {\n                        angular.element($window.document.body).unbind('keydown', keydownHandler);\n                        angular.element($window.document.body).unbind('keyup', keyupHandler);\n                        if (scope.statusElm) {\n                            scope.statusElm.remove();\n                        }\n\n                        if (scope.placeElm) {\n                            scope.placeElm.remove();\n                        }\n                    }\n                );\n            }\n\n            return _$init;\n        }\n    ]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDControl', function () {\n        var _target, \n            _parent, \n            _children,\n            i, \n            len;\n\n        function fnSetCollapse(node) {\n            node.__expanded__ = false;\n        }\n\n        function fnSetExpand(node) {\n            node.__expanded__ = true;\n        }\n\n        function fnSetDeselect(node) {\n            node.__selected__ = false;\n        }\n\n        function _$init(scope) {\n              var n, tree = {\n                anchor_node:                     null,\n                selected_nodes:                    [],\n                for_all_descendants:               scope.for_all_descendants,\n                select_anchor_node:                       function (node) {\n                  if (!node) {\n                    return null;\n                  }\n                  if (node) {\n                    tree.deselect_all();\n                    tree.select_node(node);\n                    tree.anchor_node = node;\n                    tree.expand_all_parents(node);\n                  }\n                  return node;\n                },\n                select_node: function(node) {\n                  if (!node || tree.is_selected(node)) {\n                    return null;\n                  }\n                  node.__selected__ = true;\n                  tree.selected_nodes.push(node);\n                  return node;\n                },\n                is_selected: function (node) {\n                  return node.__selected__ === true;\n                },\n                add_select_node:                       function (node) {\n                  if (!node) {\n                    return null;\n                  }\n                  // don't select node if already selected\n                  if (tree.is_selected(node)) {\n                    tree.deselect_node(node);\n                    return null;\n                  }\n                  // select node before continuing\n                  // and deselect any descendants\n                  tree.select_node(node);\n                  tree.deselect_descendants(node);\n\n                  // clean up the new selection\n                  tree.process_selection();\n                  return node;\n                },\n                range_select_node:                       function (node) {\n                  if (!node) {\n                    return null; \n                  } else if (!tree.anchor_node) {\n                    // just select the node if the anchor node isn't set\n                    return tree.select_anchor_node(node);\n                  }\n\n                  // reset selection\n                  angular.forEach(tree.selected_nodes, fnSetDeselect);\n                  tree.selected_nodes = [];\n\n                  // put the selected node back in the list\n                  tree.select_node(tree.anchor_node);\n\n                  // Add all nodes leading to the selected node\n                  while (node && node !== tree.anchor_node) {\n                    tree.select_node(node);\n                    if (node.__index_real__ < tree.anchor_node.__index_real__) {\n                      node = tree.get_next_node(node);\n                    } else {\n                      node = tree.get_prev_node(node);\n                    }\n                  }\n\n                  // clean up the new selection\n                  tree.process_selection();\n                  return tree.selected_nodes;\n                },\n                deselect_node:                     function (node, preserve_anchor) {\n                  _target = null;\n                  if (node === tree.anchor_node && !preserve_anchor) {\n                    _target = tree.anchor_node;\n                    tree.anchor_node = null;\n                  }\n                  var selected = tree.is_selected(node),\n                      selectedIndex = tree.selected_nodes.indexOf(node);\n                  if (selected) {\n                    fnSetDeselect(node);\n                    tree.selected_nodes.splice(selectedIndex, 1);\n                    _target = node\n                  }\n                  return _target;\n                },\n                deselect_descendants: function(node) {\n                  node = node || tree.anchor_node;\n                  if (node) {\n                    _children = tree.get_children(node);\n                    if (_children.length > 0) {\n                      _children.forEach(function(child) {\n                        tree.deselect_descendants(child);\n                        tree.deselect_node(child, true);\n                      });\n                    }\n                  }\n                },\n                deselect_all:                     function () {\n                  if (tree.anchor_node) {\n                    tree.anchor_node = null;\n                  }\n                  if (tree.selected_nodes) {\n                    tree.selected_nodes.forEach(fnSetDeselect);\n                    tree.selected_nodes = [];\n                  }\n                },\n                // clean up the currently selected nodes and make sure a parent \n                // node is not selected if it's child is already selected.\n                // if all children of a node are selected, then deselect them \n                // and select the node itself.\n                process_selection:                function(nodes) {\n                  nodes = nodes || tree.selected_nodes;\n                  nodes.sort(function(a, b) {\n                    return a.__index_real__ - b.__index_real__;\n                  });\n                  nodes.forEach(cleanSelected);\n                  \n                  function cleanSelected(node) {\n                    var children = tree.get_children(node),\n                        selected_child_ct = 0,\n                        selected_descendant_ct  = 0;\n                        \n                    // Do I even have kids?\n                    if (children.length) {\n                      \n                      // Guess so! let's see if any of them are selected\n                      for (var i = 0; i < children.length; i++) {\n                        // First of all, do I have any selected grandkids? \n                        // I've gotta make some calls!\n                        selected_descendant_ct += cleanSelected(children[i]);\n                        \n                        // Let's keep count of my selected kids\n                        if (tree.is_selected(children[i])) {\n                          ++selected_child_ct;\n                        }\n                      }\n                      \n                      // If all of my kids are selected, \n                      // I might as well select myself instead\n                      if (selected_child_ct === children.length) {\n                        tree.select_node(node);\n                        tree.deselect_descendants(node);\n                        \n                      // If only some of my kids or grandkids are selected, \n                      // I shouldn't be because I don't want to include them twice\n                      } else if (selected_child_ct || selected_descendant_ct) {\n                        tree.deselect_node(node, true);\n                      }\n                    }\n\n                    // Mom called! She asked how many selected children I have.\n                    // Good thing I kept count!\n                    return selected_descendant_ct + selected_child_ct;\n                  }\n                },\n                get_parent:                        function (node) {\n                  if (node && node.__parent_real__ !== null) {\n                    return scope.tree_nodes[node.__parent_real__];\n                  }\n                  return null;\n                },\n                for_all_ancestors:                 function (child, fn) {\n                  _parent = tree.get_parent(child);\n                  if (_parent) {\n                    if (fn(_parent)) {\n                      return false;\n                    }\n\n                    return tree.for_all_ancestors(_parent, fn);\n                  }\n                  return true;\n                },\n                expand_all_parents:                function (child) {\n                  return tree.for_all_ancestors(\n                      child, fnSetExpand\n                  );\n                },\n                reload_data:                       function () {\n                  return scope.reload_data();\n                },\n                ungroup_node: function(node) {\n                  // get node\n                  node = node || tree.anchor_node;\n\n                  // if its a valid group with children\n                  if (node && node.__children__.length > 0) {\n                    var _parent = tree.get_parent(node),// get parent\n                        _index = node.__index__,        // get index\n                        _children = node.__children__;  // get children\n\n                    // deselect all nodes\n                    tree.deselect_all();\n\n                    // remove the parent node\n                    tree.remove_node(node);\n\n                    // add children starting at node index\n                    tree.add_nodes(_parent, _children, _index, true);\n                    tree.reload_data();\n                  }\n                },\n                group_selected_nodes:              function () {\n                  if (tree.selected_nodes.length) {\n                    // create new parent\n                    var new_parent = {nodeId: 'Group', groupId: 'NewGroup', __children__: []},\n                    // get selected nodes\n                        _nodes = tree.selected_nodes,\n                        _index = _nodes[0].__index__,\n                        _parent = tree.get_parent(_nodes[0]);\n\n                    // add selected to new group\n                    new_parent.__children__ = _nodes;\n\n                    // remove selected from tree\n                    tree.remove_nodes(_nodes, true);\n\n                    // add the new group to tree at the selected index\n                    tree.add_node(_parent, new_parent, _index || 0, false);\n\n                    new_parent.__expanded__ = false;\n                    tree.select_anchor_node(new_parent);\n                    tree.reload_data();\n                    return new_parent;\n                  } else  {\n                    return null;\n                  }\n                },\n                add_node:                          function (parent, new_node, index, add_to_selection) {\n                  if (typeof index !== 'number') {\n                    if (parent) {\n                      parent.__children__.push(new_node);\n                      parent.__expanded__ = true;\n                    } else {\n                      scope.treeData.push(new_node);\n                    }\n                  } else {\n                    if (parent) {\n                      parent.__children__.splice(index, 0, new_node);\n                      parent.__expanded__ = true;\n                    } else {\n                      scope.treeData.splice(index, 0, new_node);\n                    }\n                  }\n                  if (add_to_selection) {\n                    tree.select_node(new_node);\n                  }\n                  return new_node;\n                },\n                add_nodes: function(parent, nodes, start_index, add_to_selection) {\n                  nodes.forEach(function(node, i) {\n                      tree.add_node(parent, node, start_index + i, add_to_selection);\n                  });\n                },\n                add_node_root:                     function (new_node) {\n                  tree.add_node(null, new_node);\n                  return new_node;\n                },\n                expand_all:                        function () {\n                  len = scope.treeData.length;\n                  for (i = 0; i < len; i++) {\n                    tree.for_all_descendants(\n                        scope.treeData[i], fnSetExpand\n                    );\n                  }\n                },\n                collapse_all:                      function () {\n                  len = scope.treeData.length;\n                  for (i = 0; i < len; i++) {\n                    tree.for_all_descendants(\n                        scope.treeData[i], fnSetCollapse\n                    );\n                  }\n                },\n                remove_node:                       function (node) {\n                  node = node || tree.anchor_node;\n                  if (node) {\n\n                    if (node.__parent_real__ !== null) {\n                      _parent = tree.get_parent(node).__children__;\n                    } else {\n                      _parent = scope.treeData;\n                    }\n                    \n                    if (tree.anchor_node === node) {\n                      tree.anchor_node = null;\n                    }\n\n                    _parent.splice(node.__index__, 1);\n                    \n                  }\n                },\n                remove_nodes:                       function (nodes, delayReload) {\n                  nodes = nodes || tree.selected_nodes;\n\n                  // remove by last item first to avoid index confusion\n                  nodes = nodes.slice().sort(function(a, b) {\n                    return b.__index_real__ - a.__index_real__;\n                  })\n                  if (nodes) {\n                    angular.forEach(nodes, tree.remove_node);\n                  }\n                  if (!delayReload) {\n                    tree.reload_data();\n                  }\n                  return nodes;\n                },\n                expand_node:                        function (node) {\n                  node = node || tree.anchor_node;\n                  if (node) {\n                    node.__expanded__ = true;\n                    return node;\n                  }\n                },\n                collapse_node:                      function (node) {\n                  node = node || tree.anchor_node;\n                  if (node) {\n                    node.__expanded__ = false;\n                    return node;\n                  }\n                },\n                get_anchor_node:                    function () {\n                  return tree.anchor_node;\n                },\n                get_selected_nodes:                 function () {\n                  return tree.selected_nodes;\n                },\n                get_first_node:                     function () {\n                  len = scope.treeData.length;\n                  if (len > 0) {\n                    return scope.treeData[0];\n                  }\n                  return null;\n                },\n                get_children:                       function (node) {\n                  return node.__children__;\n                },\n                get_siblings:                       function (node) {\n                  node = node || tree.anchor_node;\n                  if (node) {\n                    _parent = tree.get_parent(node);\n                    if (_parent) {\n                      _target = _parent.__children__;\n                    } else {\n                      _target = scope.treeData;\n                    }\n                    return _target;\n                  }\n                },\n                get_next_sibling:                  function (node) {\n                  node = node || tree.anchor_node;\n                  if (node) {\n                    _target = tree.get_siblings(node);\n                    n = _target.length;\n                    if (node.__index__ < n) {\n                      return _target[node.__index__ + 1];\n                    }\n                  }\n                },\n                get_prev_sibling:                  function (node) {\n                  node = node || tree.anchor_node;\n                  _target = tree.get_siblings(node);\n                  if (node.__index__ > 0) {\n                    return _target[node.__index__ - 1];\n                  }\n                },\n                get_first_child:                   function (node) {\n                  node = node || tree.anchor_node;\n                  if (node) {\n                    _target = node.__children__;\n                    if (_target && _target.length > 0) {\n                      return node.__children__[0];\n                    }\n                  }\n                  return null;\n                },\n                get_closest_ancestor_next_sibling: function (node) {\n                  node = node || tree.anchor_node;\n                  _target = tree.get_next_sibling(node);\n                  if (_target) {\n                    return _target;\n                  }\n\n                  _parent = tree.get_parent(node);\n                  return tree.get_closest_ancestor_next_sibling(_parent);\n                },\n                get_next_node:                     function (node) {\n                  node = node || tree.anchor_node;\n\n                  if (node) {\n                    _target = tree.get_first_child(node);\n                    if (_target) {\n                      return _target;\n                    } else {\n                      return tree.get_closest_ancestor_next_sibling(node);\n                    }\n                  }\n                },\n                get_prev_node:                     function (node) {\n                  node = node || tree.anchor_node;\n\n                  if (node) {\n                    _target = tree.get_prev_sibling(node);\n                    if (_target) {\n                      return tree.get_last_descendant(_target);\n                    }\n\n                    _parent = tree.get_parent(node);\n                    return _parent;\n                  }\n                },\n                get_last_descendant:               scope.getLastDescendant,\n                select_parent_node:                function (node) {\n                  node = node || tree.anchor_node;\n\n                  if (node) {\n                    _parent = tree.get_parent(node);\n                    if (_parent) {\n                      return tree.select_node(_parent);\n                    }\n                  }\n                },\n                select_first_node:                 function () {\n                  return tree.select_node(tree.get_first_node());\n                },\n                select_next_sibling:               function (node) {\n                  node = node || tree.anchor_node;\n\n                  if (node) {\n                    _target = tree.get_next_sibling(node);\n                    if (_target) {\n                      return tree.select_node(_target);\n                    }\n                  }\n                },\n                select_prev_sibling:               function (node) {\n                  node = node || tree.anchor_node;\n\n                  if (node) {\n                    _target = tree.get_prev_sibling(node);\n                    if (_target) {\n                      return tree.select_node(_target);\n                    }\n                  }\n                },\n                select_next_node:                  function (node) {\n                  node = node || tree.anchor_node;\n\n                  if (node) {\n                    _target = tree.get_next_node(node);\n                    if (_target) {\n                      return tree.select_node(_target);\n                    }\n                  }\n                },\n                select_prev_node:                  function (node) {\n                  node = node || tree.anchor_node;\n\n                  if (node) {\n                    _target = tree.get_prev_node(node);\n                    if (_target) {\n                      return tree.select_node(_target);\n                    }\n                  }\n                }\n              }\n              angular.extend(scope.tree, tree);\n              return scope.tree;\n            }\n        return _$init;\n    }\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    [\n        '$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            ['<table ng-class=\"$tree_class\">',\n             '    <thead>',\n             '  <tr>',\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\n             '        <\\/th>',\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\n             '         {{col.displayName || col.field}}',\n             '     </th>',\n             '    </tr>',\n             '    </thead>',\n             ' <tbody tree-dnd-nodes>',\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\n             '       ng-if=\"(node.__inited__ || node.__visible__)\"',\n             '       ng-click=\"onSelect(node)\" ',\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\n             '        <td tree-dnd-node-handle',\n             '          ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\n             '          ng-class=\"expandingProperty.cellClass\"',\n             '          compile=\"expandingProperty.cellTemplate\">',\n             '              <a data-nodrag>',\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\n             '                     class=\"tree-icon\"></i>',\n             '              </a>',\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\n             '        </td>',\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\n             '            compile=\"col.cellTemplate\">',\n             '            {{node[col.field]}}',\n             '        </td>',\n             '    </tr>',\n             '    </tbody>',\n             '</table>'].join('\\n')\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n\n    function isUndefinedOrNull(val) {\n        return angular.isUndefined(val) || val === null;\n    }\n\n    function isDefined(val) {\n        return !(angular.isUndefined(val) || val === null);\n    }\n})();"],"sourceRoot":"/source/"}